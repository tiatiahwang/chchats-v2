// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String 
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  username      String?     @unique   
  email         String      @unique
  emailVerified Boolean?    @default(false)
  password      String?
  image         String?
  isActive      Boolean      @default(true)
  provider      ProviderType @default(CREDENTIALS)
  role          RoleType     @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  scraps        Scrap[]
}

enum ProviderType {
  CREDENTIALS
  GOOGLE
}

enum RoleType {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String       @id @default(cuid())
  title          String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  comments       Comment[]
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     Int 
  subcategory    Subcategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId  Int
  votes          Vote[]
  scraps         Scrap[]
  viewCount      Int          @default(0)

  @@index([authorId])
  @@index([categoryId])
  @@index([subcategoryId])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  eng           String    @unique 
  url           String
  description   String?
  ref           String?
  isDefault     Boolean   @default(false)
  posts         Post[]    
  subcategories Subcategory[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  eng         String    @unique
  url         String
  ref         String?
  isDefault   Boolean   @default(false)
  posts       Post[]
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@index([categoryId])
}

enum VoteType {
  UP 
  DOWN
}

model Vote {
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  post     Post    @relation(fields: [postId], references: [id])
  postId   String
  type     VoteType

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}



model Scrap {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())     

  @@id([userId, postId])
  @@index([userId])
  @@index([postId])
}